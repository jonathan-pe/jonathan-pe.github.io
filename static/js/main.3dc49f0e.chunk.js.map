{"version":3,"sources":["images/logo.svg","images/animatedLogo.svg","config/colors.js","components/navbar.js","components/hero.js","components/resume.js","components/music.js","components/league.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colors","navyBlue","blue","dirtyBlue","darkBlue","black","white","grey","useStyles","makeStyles","theme","root","flexGrow","logo","width","height","marginLeft","appBar","backgroundColor","Navbar","props","styles","className","Slide","appear","direction","in","useScrollTrigger","AppBar","Toolbar","src","alt","hero","minHeight","display","flexDirection","alignItems","margin","padding","justifyContent","maxWidth","WebkitBoxPack","WebkitBoxAlign","greeting","color","fontSize","fontWeight","fontFamily","header","subtitle","caption","twitchLink","textDecoration","Hero","href","target","rel","resume","Resume","music","animatedLogo","Music","league","League","main","counterReset","App","React","Component","withStyles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3dc49f0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.15355468.svg\";","module.exports = __webpack_public_path__ + \"static/media/animatedLogo.76007a96.svg\";","const colors = {\n    navyBlue: \"#003459\",\n    blue: \"#00A8E8\",\n    dirtyBlue: \"#007EA7\",\n    darkBlue: \"#001122\",\n    black: \"#000000\",\n    white: \"#FFFFFF\",\n    grey: \"#999999\"\n};\n\nexport default colors;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport logo from '../images/logo.svg';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Slide from '@material-ui/core/Slide';\nimport colors from '../config/colors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  logo: {\n    width: 40,\n    height: 30,\n    marginLeft: 30\n  },\n  appBar: {\n    backgroundColor: colors.darkBlue\n  }\n}));\n\nexport default function Navbar(props) {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <Slide appear={false} direction=\"down\" in={!useScrollTrigger()}>\n        <AppBar className={styles.appBar}>\n          <Toolbar>\n            <img src={logo} alt=\"logo\" className={styles.logo} />\n          </Toolbar>\n        </AppBar>\n      </Slide>\n    </div>\n  );\n}\n","import React from 'react';\nimport colors from '../config/colors';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    hero: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        margin: \"0 auto\",\n        padding: \"150px 0\",\n        justifyContent: \"center\",\n        maxWidth: 1000,\n        WebkitBoxPack: \"center\",\n        WebkitBoxAlign: \"center\"\n    },\n      \n    greeting: {\n        width: \"100%\",\n        color: colors.blue,\n        fontSize: 20,\n        fontWeight: \"normal\",\n        fontFamily: \"'Courier New', Courier, monospace\",\n        margin: \"0px 0px 10px 2px\"\n    },\n      \n    header: {\n        fontSize: 100,\n        width: \"100%\",\n        color: colors.white,\n        margin: \"0px 0px 10px 0px\"\n    },\n      \n    subtitle: {\n        width: \"100%\",\n        fontSize: 50,\n        color: colors.grey,\n        margin: 0\n    },\n\n    caption: {\n        fontSize: 18,\n        color: colors.grey,\n        margin: \"50px 0px 0px 0px\",\n        width: \"50%\"\n    },\n\n    twitchLink: {\n        color: colors.blue,\n        textDecoration: \"none\"\n    }\n}));\n\nexport default function Hero() {\n    const styles = useStyles();\n\n    return (\n        <section className={styles.hero}>\n            <h1 className={styles.greeting}>Hi there! I'm</h1>\n            <h2 className={styles.header}>Jonathan Pe.</h2>\n            <h3 className={styles.subtitle}>I like coding, gaming and DJing.</h3>\n            <div className={styles.caption}>I'm a Software Engineer based in San Francisco, CA \n            with interests in web & mobile development. \n            I also enjoy playing video games and DJing \n            on <a href=\"https://twitch.tv/jpeeeeeeeeeeee\" target=\"_blank\" rel=\"noopener\" className={styles.twitchLink}>Twitch</a>!\n            </div>\n        </section>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    resume: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        padding: 50,\n        justifyContent: \"center\"\n    },\n}));\n\nexport default function Resume() {\n    const styles = useStyles();\n    return (\n        <section className={styles.resume}>\n            Resume\n        </section>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport animatedLogo from '../images/animatedLogo.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    music: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        padding: 50,\n        justifyContent: \"center\",\n    },\n    animatedLogo: {\n        height: \"auto\",\n        width: \"25%\"\n      }\n}));\n\nexport default function Music() {\n    const styles = useStyles();\n    return (\n        <section className={styles.music}>\n            <img src={animatedLogo} alt=\"animated logo\" className={styles.animatedLogo} />\n        </section>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    league: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        padding: 50,\n        justifyContent: \"center\"\n    },\n}));\n\nexport default function League() {\n    const styles = useStyles();\n    return (\n        <section className={styles.league}>\n            League\n        </section>\n    );\n}\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Navbar from './components/navbar.js';\nimport Hero from './components/hero.js';\nimport Resume from './components/resume.js';\nimport Music from './components/music.js';\nimport League from './components/league.js';\nimport colors from './config/colors';\n\nconst styles = (theme) => ({\n  main: {\n      counterReset: \"section 0\",\n      minHeight: \"100vh\",\n      color: colors.white,\n      margin: \"0 auto\",\n      padding: \"0px 150px\",\n      maxWidth: 1600,\n      width: \"100%\"\n  },\n});\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar/>\n        <div className={styles.main}>\n          <Hero />\n          <Resume />\n          <Music />\n          <League />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}