{"version":3,"sources":["images/logo.svg","images/animatedLogo.svg","config/colors.js","components/navbar.js","components/hero.js","components/resume.js","components/music.js","components/league.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colors","primaryGreen","secondaryGreen","brightGreen","lightGreen","darkGreen","subGreen","green","darkGreyGreen","black","white","grey","lightGrey","darkGrey","useStyles","makeStyles","theme","root","flexGrow","logo","width","height","appBar","backgroundColor","Navbar","props","styles","className","Slide","appear","direction","in","useScrollTrigger","threshold","AppBar","Toolbar","src","alt","hero","minHeight","display","flexDirection","alignItems","padding","greeting","color","fontSize","header","subtitle","caption","Hero","resume","justifyContent","Resume","music","animatedLogo","Music","league","League","main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0d76e22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.15355468.svg\";","module.exports = __webpack_public_path__ + \"static/media/animatedLogo.76007a96.svg\";","const colors = {\n    primaryGreen: \"#0a2e36\",\n    secondaryGreen: \"#036D19\",\n    brightGreen: \"#27FB6B\",\n    lightGreen: \"#bfffd3\",\n    darkGreen: \"#5a7061\",\n    subGreen: \"#14CC60\",\n    green: \"#09A129\",\n    darkGreyGreen: \"#283538\",\n    black: \"#000000\",\n    white: \"#FFFFFF\",\n    grey: \"#757575\",\n    lightGrey: \"#acacac\",\n    darkGrey: \"#222222\",\n};\n\nexport default colors;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport logo from '../images/logo.svg';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Slide from '@material-ui/core/Slide';\nimport colors from '../config/colors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  logo: {\n    width: 40,\n    height: 30\n  },\n  appBar: {\n    backgroundColor: colors.darkGrey\n  }\n}));\n\nexport default function Navbar(props) {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <Slide appear={false} direction=\"down\" in={!useScrollTrigger({ threshold: 50 })}>\n        <AppBar className={styles.appBar}>\n          <Toolbar>\n            <img src={logo} alt=\"logo\" className={styles.logo} />\n          </Toolbar>\n        </AppBar>\n      </Slide>\n      <Toolbar />\n    </div>\n  );\n}","import React from 'react';\nimport colors from '../config/colors';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    hero: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        padding: 50\n    },\n      \n    greeting: {\n        color: colors.black,\n        fontSize: 25,\n    },\n      \n    header: {\n        fontSize: 100,\n        color: colors.black,\n    },\n      \n    subtitle: {\n        fontSize: 50,\n        color: colors.lightGrey,\n    },\n      \n    caption: {\n        fontSize: 25,\n    }\n}));\n\nexport default function Hero() {\n    const styles = useStyles();\n\n    return (\n        <div className={styles.hero}>\n            <div className={styles.greeting}>Hello there! I'm</div>\n            <div className={styles.header}>Jonathan Pe</div>\n            <div className={styles.subtitle}>and I like to code!</div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    resume: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        padding: 50,\n        justifyContent: \"center\"\n    },\n}));\n\nexport default function Resume() {\n    const styles = useStyles();\n    return (\n        <div className={styles.resume}>\n            Resume\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport animatedLogo from '../images/animatedLogo.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    music: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        padding: 50,\n        justifyContent: \"center\",\n    },\n    animatedLogo: {\n        height: \"auto\",\n        width: \"25%\"\n      }\n}));\n\nexport default function Music() {\n    const styles = useStyles();\n    return (\n        <div className={styles.music}>\n            <img src={animatedLogo} alt=\"animated logo\" className={styles.animatedLogo} />\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    league: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        padding: 50,\n        justifyContent: \"center\"\n    },\n}));\n\nexport default function League() {\n    const styles = useStyles();\n    return (\n        <div className={styles.league}>\n            League\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Navbar from './components/navbar.js';\nimport Hero from './components/hero.js';\nimport Resume from './components/resume.js';\nimport Music from './components/music.js';\nimport League from './components/league.js';\nimport colors from './config/colors';\n\nconst useStyles = makeStyles((theme) => ({\n  main: {\n      backgroundColor: colors.darkGrey,\n      color: colors.white\n  },\n}));\n\nexport default function App() {\n  const styles = useStyles();\n  \n  return (\n    <div>\n      <Navbar/>\n      <div className={styles.main}>\n        <Hero />\n        <Resume />\n        <Music />\n        <League />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}